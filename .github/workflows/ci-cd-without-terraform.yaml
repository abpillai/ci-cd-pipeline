name: CI/CD Pipeline without Terraform

env:
  AWS_REGION: me-central-1
  ECR_REPOSITORY: apillai-ecr-repo
  IMAGE_TAG: ${{ github.repository_id }}${{ github.run_number }}

jobs:
  build:
    name: Build and push to ECR v${{ github.event.inputs.version }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '8'
  
    - name: Cache Maven dependencies
      id: cache-maven
      if: github.event_name == 'push'
      #This action allows caching dependencies 
      # and build outputs to improve workflow execution time.
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - if: ${{ steps.cache-maven.outputs.cache-hit != 'true' }}
      name: List the state of Maven dependencies
      continue-on-error: true
      run: mvn dependency:tree

    - name: Build with Maven
      if: github.event_name == 'push'
      run: mvn clean package -e
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'false'

    - name: Build, tag and push image to Amazon ECR
      if: github.event_name == 'push'
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EC2.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg PROFILE=local .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "{image}={$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG}" >> $GITHUB_OUTPUT
    - name: List ECR images
      run: |
        aws ecr describe-images --repository-name $ECR_REPOSITORY --output text > images.txt
        cat images.txt
  deploy:
    name: Deploy to EC2 v${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set branch name
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | cut -d'/' -f1)" >> $GITHUB_ENV
      
    - name: Assign EC2 Public IP
      if: github.event_name == 'push'
      run: |
        if [[ ${{ github.ref == 'refs/heads/master' }} == true ]]; then
          echo "${{ github.ref }}, master"
          echo "EC2_PUBLIC_IP=3.29.240.1" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'false'

    - name: Deploy to Amazon Linux EC2
      if: github.event_name == 'push'
      run: |
        if [[ ${{ github.ref == 'refs/heads/master' }} == true ]]; then
          ssh -i $ssh-private-key -o StrictHostKeyChecking=no ${{ secrets.EC2_SSH_USER }}@${{ env.EC2_PUBLIC_IP }} <<EOF
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo groupadd docker
            sudo usermod -a -G docker ec2-user
            newgrp docker
            sudo systemctl restart docker
            aws configure set region $AWS_REGION
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
            docker stop dataMS-container || true
            docker rm dataMS-container || true
            docker run -d -p 80:8080 --name dataMS-container ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        EOF
        else
          echo "Unsupported branch for deployment"
        fi

    - name: Delete previous images
      if: github.event_name == 'push'
      run: |
        aws ecr list-images --repository-name $ECR_REPOSITORY --query 'imageIds[*]' --output text > images.txt
        while IFS= read -r imageId; do
          imageDigest=$(echo $imageId | awk "{print \$1}")
          imageTag=$(echo $imageId | awk "{print \$2}")
          run_number=${{ github.run_number }}
          prev_run_number=$((run_number - 1))
          if [[ "$imageTag" == "${{ github.repository_id }}"* ]]; then
            echo "$imageTag starts with ${{ github.repository_id }}"
            if ! [[ "$imageTag" =~ (.*${{ github.run_number }}|.*$prev_run_number) ]]; then
              echo "$imageId"
              aws ecr batch-check-layer-availability --repository-name $ECR_REPOSITORY --layer-digests $imageDigest
              if [ $? -eq 0 ]; then
                aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$imageDigest
              fi
            fi
          fi
        done < images.txt
      env:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}